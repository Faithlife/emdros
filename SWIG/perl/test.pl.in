#!/usr/bin/perl -w
use strict;
use lib "@prefix@/lib/emdros";
use EmdrosPerl;

# for stress testing: run everything 100 times
for (1..10) {

my $db = EmdrosPerl::@EMDFDB_BACKEND@->new
	("localhost","emdf","changeme","wihebrew1202");

my @results = $db->connectionOk();
print "ConnectionOK: @results\n";

$db->useDatabase("wihebrew1202") or die;

my $dummy = 0;
@results = $db->getMax_m($dummy);
die unless $results[0];

print "Number of monads in database: $results[1]\n";

my $output = EmdrosPerl::EMdFOutput->new
	($EmdrosPerl::kCSASCII,
	 $EmdrosPerl::kSTDOUT,
	 $EmdrosPerl::kOKConsole);
print "Output object: $output\n";

my $ee = EmdrosPerl::MQLExecEnv->new($db,$output);
print "Execution Env: $ee\n";

my @queries = 
("SELECT OBJECTS HAVING MONADS IN {1} [ALL] GO",
 "SELECT ALL OBJECTS IN { 1-10 } WHERE [word] GO",
 "SELECT ALL OBJECTS IN { 1-28735 } WHERE [book [chapter]] GO");
# my @queries =
#	("SELECT MAX_M GO",
#	 "SELECT ALL OBJECTS IN { 1-10 } WHERE [word] GO");

foreach my $query (@queries) {
	print "\nRunning query: $query\n";

	my @results = EmdrosPerl::mqlExecuteString
		($ee,$query,$dummy,0,0);
	print "Query returns: @results\n";

	my $statement = $ee->swig_pStatement_get();
	print "Statement obj: $statement\n";

	my $result = $statement->getResult();
	print "Result object: $result\n";

	my $sheaf = $result->getSheaf();
	if ($sheaf) {
		print "Result sheaf : $sheaf\n";
		my $sheaf_iter = $sheaf->const_iterator();
  	        print "sheaf_iter = $sheaf_iter\n";
		my $strawnum = 0;
		while ($sheaf_iter->hasNext()) {
			$strawnum++;
			my $straw = $sheaf_iter->next();
			print "  Straw $strawnum: $straw\n";
			my $straw_iter = $straw->const_iterator();
			my $monum = 0;
			while ($straw_iter->hasNext()) {
			    $monum++;
			    my $mo = $straw_iter->next();
			    print "    MO $monum: $mo\n";
			    print "      id_d   : ".($mo->getID_D())."\n";
			    print "      kind   : ".($mo->getKind())."\n";
			    my $embedsheaf = $mo->getSheaf() || "none";
			    print "      sheaf  : $embedsheaf\n";

			}
		}
	} else {
		print "Result is a table.\n";
		my $rows = $result->size();
		print "Num. of rows : $rows\n";
		my $table_iter = $result->iterator();
		while ($table_iter->hasNext()) {
		    my $table_row = $table_iter->next();
		    my $table_row_iter = $table_row->iterator();
		    while ($table_row_iter->hasNext()) {
			print $table_row_iter->next();
			print " | ";
		    }
		    print "\n";
		}
	}
}

$ee->DESTROY();
$output->DESTROY();
$db->DESTROY();

}
# end for (1..100)

do "./crash.pl";

print "All tests completed OK!\n";

exit 0;
