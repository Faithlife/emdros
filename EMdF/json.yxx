%include{

/*
 * json.yxx
 *
 * JSON parser
 *
 * Ulrik Sandborg-Petersen
 * Created: 7/28-2008
 * Last update: 5/11-2018
 *
 */

/*
 * Copyright (C) 2001-2018     Ulrik Sandborg-Petersen
 * Copyright (C) 2018-present  Sandborg-Petersen Holding ApS, Denmark
 *
 * Licensed under the MIT License.
 *
 * Please see the file COPYING in the root of the sources for more details.
 *
 */

#include <cassert>
#include <json_classes.h>
#include <mql_yylex.h>
#include <cstdlib>
#include <string>

#undef TOKEN

#undef YYCODETYPE
#undef YYNOCODE
#undef YYACTIONTYPE
#undef YYNSTATE
#undef YYNRULE
#undef YY_ACTTAB_COUNT
#undef YY_SHIFT_USE_DFLT
#undef YY_SHIFT_COUNT
#undef YY_SHIFT_MIN
#undef YY_SHIFT_MAX
#undef YY_REDUCE_USE_DFLT
#undef YY_REDUCE_COUNT
#undef YY_REDUCE_MIN
#undef YY_REDUCE_MAX

} // end include


%token_destructor { 
	if (!pEE->pLexer->isLocallyAllocatedToken($$)) {
		deleteToken($$); 
	}
}
%token_prefix T_JSON_
%token_type   {Token*}
%extra_argument {JSONExecEnv *pEE}
%syntax_error {
  UNUSED(yyminor);
  UNUSED(yymajor);
  pEE->bSyntaxError = true;
  std::string errMsg;
  if (TOKEN == 0) {
     errMsg = "syntax error near <<EOF>>";
  } else {
     errMsg = "syntax error near " + TOKEN->getTokenName();
  }
  pEE->addToError(errMsg);
}
%name JSONParser

%parse_failure {
  pEE->bSyntaxError = true;
}

%type top_value {JSONValue*}
%destructor top_value { delete($$); }
top_value ::= json_value(X) . { pEE->setTopValue(X); }

%type json_value {JSONValue*}
%destructor json_value { delete($$); }
json_value(V) ::= json_object(X) . { V = X; }
json_value(V) ::= json_list(X) . { V = X; }
json_value(V) ::= json_boolean(X) . { V = X; }
json_value(V) ::= json_string(X) . { V = X; }
json_value(V) ::= json_integer(X) . { V = X; }
json_value(V) ::= json_null(X) . { V = X; }

%type json_object {JSONValue*}
%destructor json_object {delete($$); }
json_object(V) ::= KEY_BRACE_OPEN(O) json_key_value_list(X) opt_comma KEY_BRACE_CLOSE(C) .
{ V = new JSONValue(X); O = 0; C = 0;}
json_object(V) ::= KEY_BRACE_OPEN(O) KEY_BRACE_CLOSE(C) .
{ V = new JSONValue((JSONKeyValuePair*) 0); O = 0; C = 0;}

%type opt_comma {int}
%destructor opt_comma {;}
opt_comma(V) ::= KEY_COMMA(C) . { V = 0; C = 0;}
opt_comma(V) ::= /* empty */ . { V = 0; }


%type json_key_value_list {JSONKeyValuePair*}
%destructor json_key_value_list {delete($$);}
json_key_value_list(V) ::= json_key_value_list_element(E) .
{ V = E; }
json_key_value_list(V) ::= json_key_value_list(L) 
                           KEY_COMMA(C)
                           json_key_value_list_element(E) .
{ V = E; V->setNext(L); C = 0; }


%type json_key_value_list_element {JSONKeyValuePair*}
%destructor json_key_value_list_element {delete($$);}
json_key_value_list_element(V) ::= STRING(S) KEY_COLON(C) json_value(X) .
{ V = new JSONKeyValuePair(S->extractString(),X,0); delete S; C = 0; }


%type json_list {JSONValue*}
%destructor json_list {delete($$); }
json_list(V) ::= KEY_BRACKET_OPEN(O) KEY_BRACKET_CLOSE(C) .
{ V = new JSONValue((JSONListElement*) 0); O = 0; C = 0; }
json_list(V) ::= KEY_BRACKET_OPEN(O) json_value_list(X) opt_comma KEY_BRACKET_CLOSE(C) .
{ V = new JSONValue(X); O = 0; C = 0; }


%type json_value_list {JSONListElement*}
%destructor json_value_list {delete($$); }
json_value_list(V) ::= json_value(E) .
{ V = new JSONListElement(E); }
json_value_list(V) ::= json_value_list(L) 
                       KEY_COMMA(C)
		       json_value(E) .
{ V = new JSONListElement(E); V->setNext(L); C = 0; }






%type json_string {JSONValue*}
%destructor json_string {delete($$);}
json_string(E) ::= STRING(S).
    { E = new JSONValue(S->extractString()); S->clear(); delete S; }


%type json_boolean {JSONValue*}
%destructor json_boolean {delete($$);}
json_boolean(E) ::= KEY_TRUE(T) .
    { E = new JSONValue(true); T = 0;}
json_boolean(E) ::= KEY_FALSE(F) .
    { E = new JSONValue(false); F = 0;}


%type json_null {JSONValue*}
%destructor json_null {delete($$);}
json_null(E) ::= KEY_NULL(N) .
    { E = new JSONValue(); N = 0; }


%type json_integer {JSONValue*}
%destructor json_integer {delete($$);}
json_integer(E) ::= INTEGER(S).
    { E = new JSONValue(S->integer); delete S; }


