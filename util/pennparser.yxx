%include{

/*
 * pennparser.yxx
 *
 * Penn Treebank and BLLIP parser
 *
 * Ulrik Petersen
 * Created: 2/17-2006
 * Last update: 11/2-2018
 *
 */

/*
 * Copyright (C) 2001-2018     Ulrik Sandborg-Petersen
 * Copyright (C) 2018-present  Sandborg-Petersen Holding ApS, Denmark
 *
 * Licensed under the MIT License.
 *
 * Please see the file COPYING in the root of the sources for more details.
 *
 */



#include <iostream>
#include <string>
#include <pennimporter.h>
#include <penn_yylex.h>
#include <string_list.h>


} // end include

%token_destructor { UNUSED(pEE); deletePennToken($$); }
%token_prefix T_
%token_type   {PennToken* }
%extra_argument {PennImporterEnv *pEE}
%syntax_error {
  UNUSED(yymajor);
  UNUSED(yyminor);
  pEE->bSyntaxError = true;
  std::string errMsg = "syntax error near " + TOKEN->getTokenName() + ' ';
  pEE->strErrorMessage += errMsg;
}
%name PennParser
%stack_size 100000

%parse_failure {
    pEE->bSyntaxError = true;
}

%type start_symbol {PennTreeNodeList*}
%destructor start_symbol {delete($$);}
start_symbol ::= corpus(C) . { pEE->pCorpus = new PennTreeNodeList(C); }

%type corpus {PennTreeNodeListNode*}
%destructor corpus {delete($$);}
corpus(C) ::= . { C = 0; }
corpus(C) ::= corpus(D) top_tree(T) . { 
	PennTreeNodeListNode *pTreeNodeListNode = new PennTreeNodeListNode(T, D);
	C = pTreeNodeListNode; 
}

%type top_tree {PennTreeNode*}
%destructor top_tree {delete($$);}
top_tree(C) ::= KEY_LPAREN tree_list(T) KEY_RPAREN . { C = new PennTreeNode(T); }
top_tree(C) ::= tree(T) .  { C = new PennTreeNode(T); }

%type tree {PennTreeNode*}
%destructor tree {delete($$);}
tree(C) ::= KEY_LPAREN NAME(N) tree_list(L) KEY_RPAREN . { 
	PennTreeNode *pNode = new PennTreeNode(N->extractString(), L); 
	C = pNode; 
	deletePennToken(N);
}

%type tree_list {PennTreeNode*}
%destructor tree_list {delete($$);}
tree_list(C) ::= tree(T) . { C = T; }
tree_list(C) ::= tree(T) tree_list(L). { T->setNextSibling(L); C = T; }
tree_list(C) ::= NAME(N) . { 
	PennTreeNode *pNode = new PennTreeNode(N->extractString()); 
	C = pNode; 
	deletePennToken(N); 
}
